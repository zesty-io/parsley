---
name: Parsley
scopeName: source.parsley
fileTypes: ['.parsley']
variables:
  identifier: '(?:{{letter}}{{letterOrDigit}}*)|(?:\^"{{identifierLiteralChar}}+")'
  letter: '[a-zA-Z_]'
  letterOrDigit: '[a-zA-Z0-9_]'
  identifierLiteralChar: ([^|"\\\f\n\r\t]|\\\\[btnfr]|\\[|"\\/])
repository:
  singleVariable:
    patterns:
      - name: variable.complex
        begin: \{
        beginCaptures:
          '0': { name: comment.block }
        end: \}
        endCaptures:
          '0': { name: comment.block }
        patterns:
        - include: '#allStrings'
  statementKeywords:
    patterns:
      - name: keyword.control.parsley
        match: '(^)?( )?(if|each|end-each|end-if|(else( |-)if))(( )|($))?'
  code:
    patterns:
    - name: variable.complex
      begin: '(\{\{)'
      beginCaptures:
        '0': {name: comment.block}
      end: '(\}\})'
      endCaptures:
        '0': {name: comment.block} 
      patterns:
        - include: '#singleVariable'
        - include: '#statementKeywords'  
        - include: '#eachOperators'  
  blockComments:
    patterns:
    - name: keyword.annotation.parsley
      begin: '\(\*\*'
      beginCaptures:
        '0': {name: keyword.annotation}
      end: '\*\*\)'
      endCaptures:
        '0': {name: keyword.annotation} 
      patterns:
        - include: '#allStrings'        
  allStrings:
    patterns:
      - name: constant.character.escape
        match: .
  eachOperators:
    patterns:
      - name: variable.other.parsley
        match: =        
patterns:
- include: text.html.basic
- include: '#code'
- include: '#blockComments'